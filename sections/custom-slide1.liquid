{{ 'custom-slide1.css' | asset_url | stylesheet_tag }}
{% style %}
  .custom-slide {
    position: relative;
    width: 100%;
    overflow: hidden;
    margin: {{ section.settings.marin_top }}px 0px {{ section.settings.margin_bottom }}px 0px;
  }



  .slidee {
    display: flex;
    transition: transform 0.5s ease;
    width: 100%;
    {% if section.settings.quantity_slide == 1 %}
      gap: 0;
      {% elsif section.settings.quantity_slide == 2 %}
        gap: 4%;
        {% else %}
          gap: 2%;
    {% endif %}
  }

  .slide-item {
    {% if section.settings.quantity_slide == 1 %}
    flex: 0 0 100%;
    {% elsif section.settings.quantity_slide == 2 %}
    flex: 0 0 48%;
    {% else %}
    flex: 0 0 32%;
    {% endif %}
    box-sizing: border-box;
    overflow: hidden;
    height: auto;
    position: relative;
    cursor: pointer;
  }

  .titlee {
    position: absolute;
    padding: 50px;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    color: {{ section.settings.text_color }};
    display: flex;
    align-items: center;
    font-size: 2rem;
    z-index: 2;
  }


  @media screen and (max-width: 768px) {
    .slide-item {

    flex: 0 0 48%;
  }
  .slidee {
        gap: 4%;
  }
  }
  @media screen and (max-width: 468px) {
    .slide-item {
    flex: 0 0 100%;
  }
  .slidee {
      gap: 0;
  }
  }
{% endstyle %}
<div class="custom-slide">
  <div class="box-slide">
    <div class="slidee">
      {% for block in section.blocks %}
        <div class="slide-item">
          <div class="hover">&#10094;</div>

          {% if block.settings.image %}
            {%- liquid
              assign image_url_600 = block.settings.image | image_url: width: 600
              assign image_url_800 = block.settings.image | image_url: width: 800
              assign image_url_1000 = block.settings.image | image_url: width: 1000
              assign image_url_1200 = block.settings.image | image_url: width: 1200
            -%}

            <img
              src="{{ image_url_600 }}"
              srcset="
                {{ image_url_600 }} 600w,
                {{ image_url_800 }} 800w,
                {{ image_url_1000 }} 1000w,
                {{ image_url_1200 }} 1200w
              "
              sizes="(max-width: 768px) 100vw, 50vw"
              alt="{{ block.settings.title | escape }}"
              loading="lazy"
              class="lazy-image"
              width="100%"
              height="auto"
            >

          {% else %}
            <!-- Nếu không có image, load placeholder -->
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          {% endif %}

          <div class="titlee">{{ block.settings.title }}</div>
        </div>
      {% endfor %}
    </div>
  </div>

  {% assign total_blocks = section.blocks.size %}
  {% assign quantity_slide = section.settings.quantity_slide %}
  {% assign dot_count = total_blocks | minus: quantity_slide %}
  {% if dot_count > 0 %}
    <div class="dots">
      {% for i in (0..dot_count) %}
        <button class="dot {% if i == 0 %}active{% endif %}" data-index="{{ i }}"></button>
      {% endfor %}
    </div>
  {% endif %}
</div>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const slideAll = document.querySelector('.custom-slide');
    if (!slideAll) return;
  
    const slide = slideAll.querySelector('.slidee');
    const dotsContainer = slideAll.querySelector('.dots');
    const items = slide.querySelectorAll('.slide-item');
  
    function setupSlider() {
      if (!slide || items.length === 0) return;
  
      // Xóa dots cũ
      dotsContainer.innerHTML = '';
  
      let itemsPerSlide = 3; // mặc định desktop
  
      // Responsive rules
      if (window.innerWidth <= 320) {
        itemsPerSlide = 1;
      } else if (window.innerWidth <= 768) {
        itemsPerSlide = 2;
      }
  
      const dotCount = Math.max(0, items.length - itemsPerSlide);
  
      // Tạo lại dots
      for (let i = 0; i <= dotCount; i++) {
        const dot = document.createElement('button');
        dot.className = 'dot';
        if (i === 0) dot.classList.add('active');
        dot.dataset.index = i;
        dotsContainer.appendChild(dot);
      }
  
      // Gán lại sự kiện click cho dots
      const newDots = dotsContainer.querySelectorAll('.dot');
  
      newDots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          const itemWidth =
            items[0].getBoundingClientRect().width +
            (items[1] ? items[1].getBoundingClientRect().left - items[0].getBoundingClientRect().right : 0);
          const scrollAmount = index * itemWidth;
          slide.style.transform = `translateX(-${scrollAmount}px)`;
  
          newDots.forEach((d) => d.classList.remove('active'));
          dot.classList.add('active');
        });
      });
    }
  
    // Lần đầu setup
    setupSlider();
  
    // Re-setup mỗi lần resize màn hình
    window.addEventListener('resize', () => {
      setupSlider();
    });
  
   
  });
  

  if (window.Shopify && Shopify.designMode) {
    const reinitCustomHeader = (container) => {
      // Nếu container có được truyền vào thì chỉ setup lại phần đó
      const root = container || document;
  
    
  
      
      const slideAll = root.querySelector('.custom-slide');
      if (!slideAll) return;
    
      const slide = slideAll.querySelector('.slidee');
      const dotsContainer = slideAll.querySelector('.dots');
      const items = slide.querySelectorAll('.slide-item');
      if (!slideAll || !slide || !dotsContainer || !items ) {
        console.warn('Không tìm thấy một số phần tử trong header để khởi tạo lại.');
        return;
      }
      function setupSlider() {
        if (!slide || items.length === 0) return;
    
        // Xóa dots cũ
        dotsContainer.innerHTML = '';
    
        let itemsPerSlide = 3; // mặc định desktop
    
        // Responsive rules
        if (window.innerWidth <= 320) {
          itemsPerSlide = 1;
        } else if (window.innerWidth <= 768) {
          itemsPerSlide = 2;
        }
    
        const dotCount = Math.max(0, items.length - itemsPerSlide);
    
        // Tạo lại dots
        for (let i = 0; i <= dotCount; i++) {
          const dot = document.createElement('button');
          dot.className = 'dot';
          if (i === 0) dot.classList.add('active');
          dot.dataset.index = i;
          dotsContainer.appendChild(dot);
        }
    
        // Gán lại sự kiện click cho dots
        const newDots = dotsContainer.querySelectorAll('.dot');
    
        newDots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            const itemWidth =
              items[0].getBoundingClientRect().width +
              (items[1] ? items[1].getBoundingClientRect().left - items[0].getBoundingClientRect().right : 0);
            const scrollAmount = index * itemWidth;
            slide.style.transform = `translateX(-${scrollAmount}px)`;
    
            newDots.forEach((d) => d.classList.remove('active'));
            dot.classList.add('active');
          });
        });
      }
    
      // Lần đầu setup
      setupSlider();
    
      // Re-setup mỗi lần resize màn hình
      window.addEventListener('resize', () => {
        setupSlider();
      });
    
     
    };
  
    // Các sự kiện của Shopify Editor
    ['shopify:section:load', 'shopify:section:select', 'shopify:section:deselect'].forEach(eventName => {
      document.addEventListener(eventName, (e) => {
        console.log(`[Shopify Editor] Event: ${eventName}`, e.detail);
        requestAnimationFrame(() => {
          reinitCustomHeader(e.target);
        });
      });
    });
  }
 
 
</script>
{% schema %}
{
  "name": "Custom Slide",
  "settings": [
    {
      "type": "range",
      "id": "quantity_slide",
      "label": "Quantity Item Slide",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "marin_top",
      "label": "Margin Top",
      "min": 0,
      "max": 100,
      "step": 4,
      "default": 0
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Margin Bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "default": 0
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Màu chữ",
      "default": "#ffffff"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Slide item",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "title",
          "default": "Sample"
        }
      ]
    }
  ],
  "max_blocks": 12,
  "presets": [
    {
      "name": "Custom Slide"
    }
  ]
}
{% endschema %}
